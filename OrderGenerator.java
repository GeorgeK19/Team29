package hw4;

import java.io.*;
//import java.io.File;  // Import the File class
//import java.io.FileWriter;   // Import the FileWriter class
//import java.io.IOException;  // Import the IOException class to handle errors

public class OrderGenerator implements UsefulNumbers{
	
	private int numberOfOrders;
	private Order[] orders;
	
	/**
     * Constructs an OrderGenerator object with the specified number of orders.
     * @param aNumberOfOrders The number of orders to generate.
     * @throws IllegalArgumentException if the number of orders is negative.
     */
	public OrderGenerator(int aNumberOfOrders) {
		
		if(aNumberOfOrders < ZERO) {
			
			throw new IllegalArgumentException("A negative number was entered for the number of orders!");
			
		}
		this.numberOfOrders = aNumberOfOrders;
		
		this.orders = new Order[this.numberOfOrders];
		
		for(int i = ZERO; i < this.orders.length; i++) 
			
			this.orders[i] = new Order((i + ONE));
		
	}
	
	/**
     * Sets the number of orders.
     * @param newNumberOfOrders The new number of orders.
     * @throws IllegalArgumentException if the new number of orders is negative.
     */
	public void setNumberOfOrders(int newNumberOfOrders) {
		
		if(newNumberOfOrders < ZERO) {
			
			throw new IllegalArgumentException("A negative number was entered for the number of orders!");
			
		}
		
		this.numberOfOrders = newNumberOfOrders;
		
	}
	
	/**
     * Adds an order to the generator.
     * @param newOrder The order to add.
     */
	public void addOrder(Order newOrder) {
		
		this.setNumberOfOrders((this.numberOfOrders + ONE));
		
		Order[] newTable = new Order[this.numberOfOrders];
		
		for(int i = ZERO; i < this.orders.length; i++) 
			
			newTable[i] = this.orders[i];
		
		newTable[(this.numberOfOrders - ONE)] = newOrder;
		
		this.orders = new Order[this.numberOfOrders];
		
		for(int i = ZERO; i < this.orders.length; i++) 
			
			this.orders[i] = newTable[i];

	}
	
	/**
     * Gets the number of orders.
     * @return The number of orders.
     */
	public int getNumberOfOrders() {
		
		return (this.numberOfOrders);
		
	}
	
	/**
     * Gets the order at the specified position.
     * @param aPosition The position of the order to retrieve.
     * @return The order at the specified position.
     */
	public Order getOrder(int aPosition) {
		
		return (this.orders[aPosition]);
		
	}
	
	/**
     * Returns a string representation of all orders generated by the generator.
     * @return A string representation of all orders.
     */
	public String toString() {
		
		String allOrders= (this.numberOfOrders + "\n" + "\n");
		
		/*allOrders += ("<num, torder, treq, npp, npc, nps, npm, npf>" + "\n" + "\n");
		allOrders += ("num: the serial number of the order.\r\n"
				+ "torder: corresponds to the moment of receiving the order, expressed in number of minutes from\r\n"
				+ "at 18:00, when the steakhouse opens to the public, until 23:00.\r\n"
				+ "treq: corresponds to the time at which the customer wishes to receive the order\r\n"
				+ "of, expressed in number of minutes from 18:00, when the kebab shop opens to the public,\r\n"
				+ "until 24:00.\r\n"
				+ "npp: number of pies skewers in the order.\r\n"
				+ "npc: number of chicken pies in the order.\r\n"
				+ "nps: number of sheftalia pies in the order.\r\n"
				+ "npm: number of mix pies in the order.\r\n"
				+ "npf: number of potato portions of the order.\r\n" + "\n");
		*/
		
		for(int i = ZERO; i < this.numberOfOrders; /*or i < this.orders.length;*/ i++) {
			
			allOrders += this.orders[i].toString();
			
			if(i < (this.numberOfOrders - ONE))
				
				allOrders += "\n";	
			
		}
		
		return (allOrders);
		
	}

	/**
     * Main method to generate orders and save them to text files.
     * @param args Command line arguments. Expects the number of orders to generate.
     */
	public static void main(String[] args) {
		
		if(args.length == ZERO) {
			
			System.out.println("Usage : java OrderGenerator number of orders");
			System.exit(1);
			
		}
		
		boolean stop = false;
		
		for (int i = ZERO; i < args.length; i++) 
			
			for(int j = ZERO; j < args[i].length(); j++) 
				
				if((args[i].charAt(j) < '0') || (args[i].charAt(j) > '9'))
					
					stop = true;
		
		if(stop) {
			
			System.out.println("Values ​​in command arguments do not contain only characters - numbers!");
			System.out.println("Usage : java OrderGenerator only characters - numbers!");
			System.exit(1);
			
		}
			
		
		Days days = new Days(args.length);
		
		for(int i = ZERO; i < args.length; i++) {
				
			String file = ("orders" + (i + ONE) + ".txt");
			
			try {
				
				OutputStream target = new FileOutputStream(file);
				
				int numberOfOrders = Integer.parseInt(args[i]);
				
				OrderGenerator generator = new OrderGenerator(numberOfOrders);
				
				String output = generator.toString();
				
				int c;
				
				for(int j = ZERO; j < output.length(); j++) {
					
					c = output.charAt(j);
					
					target.write(c);
					
				}
				
				target.close();
				
			}
			
			catch(IOException e) {
				
				System.err.println("Error:" + e.getMessage());
				
			}
			/*try {
				
				File myObj = new File(file);
				      
				if (myObj.createNewFile())
					
					System.out.println("File created: " + myObj.getName());
				
				else 
					
					System.out.println("File already exists.");
				
			} 
				
			catch (IOException e) {
				
				System.out.println("An error occurred.");
				e.printStackTrace();
				
			}
				
			int numberOfOrders = Integer.valueOf(args[i]);
				
			OrderGenerator generator = new OrderGenerator(numberOfOrders);
				
			try {
					
				FileWriter myWriter = new FileWriter(file);
					
				myWriter.write(generator.toString());
				
				myWriter.close();
				
				System.out.println("Successfully wrote to the file with name " + file + ".");
				
			} 
			
			catch (IOException e) {
				
				System.out.println("An error occurred.");
				e.printStackTrace();
				
			}
			*/
			
			days.addFileName(file);
				
		}

	}

}
